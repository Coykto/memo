name: Deploy

on:
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'PROD'
        type: choice
        options:
          - PROD
          - STAGING
          - DEV

jobs:
  lint-and-test:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    uses: ./.github/workflows/lint-test.yml

  check-environment:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "environment=PROD" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

  create-tag:
    runs-on: ubuntu-latest
    needs: check-environment
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          default_bump: patch

  deploy:
    runs-on: ubuntu-latest
    needs: [check-environment, create-tag]
    environment: ${{ needs.check-environment.outputs.environment }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        id: get_version
        run: echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_api:${{ steps.get_version.outputs.VERSION }}

      - name: Build and push Telegram bot image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/clients/telegram_client/docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_tg:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_tg:${{ steps.get_version.outputs.VERSION }}

      - name: Create env file
        run: |
          cat << EOF > docker/.env
          OPENAI_API_KEY=${{ secrets[format('{0}_OPENAI_API_KEY', needs.check-environment.outputs.environment)] }}
          PINECONE_API_KEY=${{ secrets[format('{0}_PINECONE_API_KEY', needs.check-environment.outputs.environment)] }}
          PINECONE_HOST=${{ secrets[format('{0}_PINECONE_HOST', needs.check-environment.outputs.environment)] }}
          CLAUDE_API_KEY=${{ secrets[format('{0}_CLAUDE_API_KEY', needs.check-environment.outputs.environment)] }}
          TELEGRAM_API_TOKEN=${{ secrets[format('{0}_TELEGRAM_API_TOKEN', needs.check-environment.outputs.environment)] }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DATA_FOLDER=/data
          TAG=${{ steps.get_version.outputs.VERSION }}
          EOF

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('{0}_SSH_HOST', needs.check-environment.outputs.environment)] }}
          port: ${{ secrets[format('{0}_SSH_PORT', needs.check-environment.outputs.environment)] }}
          username: ${{ secrets[format('{0}_SSH_USERNAME', needs.check-environment.outputs.environment)] }}
          key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', needs.check-environment.outputs.environment)] }}
          script: |
            mkdir -p ${{ secrets[format('{0}_SSH_PATH', needs.check-environment.outputs.environment)] }}

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_SSH_HOST', needs.check-environment.outputs.environment)] }}
          port: ${{ secrets[format('{0}_SSH_PORT', needs.check-environment.outputs.environment)] }}
          username: ${{ secrets[format('{0}_SSH_USERNAME', needs.check-environment.outputs.environment)] }}
          key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', needs.check-environment.outputs.environment)] }}
          source: "docker/.env,docker/docker-compose.yml"
          strip_components: 1
          target: ${{ secrets[format('{0}_SSH_PATH', needs.check-environment.outputs.environment)] }}

      - name: Start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('{0}_SSH_HOST', needs.check-environment.outputs.environment)] }}
          port: ${{ secrets[format('{0}_SSH_PORT', needs.check-environment.outputs.environment)] }}
          username: ${{ secrets[format('{0}_SSH_USERNAME', needs.check-environment.outputs.environment)] }}
          key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', needs.check-environment.outputs.environment)] }}
          script: |
            cd ${{ secrets[format('{0}_SSH_PATH', needs.check-environment.outputs.environment)] }}
            docker network create logging_network || true
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d