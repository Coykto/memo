name: Deploy

on:
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'PROD'
        type: choice
        options:
          - PROD
          - STAGING
          - DEV

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: create-tag

    strategy:
      matrix:
        environment: [PROD, STAGING, DEV]

    env:
      SSH_HOST: ${{ secrets[format('{0}_SSH_HOST', matrix.environment)] }}
      SSH_PORT: ${{ secrets[format('{0}_SSH_PORT', matrix.environment)] }}
      APP_PATH: ${{ secrets[format('{0}_SSH_PATH', matrix.environment)] }}

    if: >-
      ${{
        (github.event_name == 'pull_request' && 
         github.event.pull_request.merged == true && 
         matrix.environment == 'PROD') ||
        (github.event_name == 'workflow_dispatch' && 
         github.event.inputs.environment == matrix.environment)
      }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_api:${{ steps.get_version.outputs.VERSION }}

      - name: Build and push Telegram bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/clients/telegram_client/docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_tg:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/memo_tg:${{ steps.get_version.outputs.VERSION }}

      - name: Create env file
        run: |
          cat << EOF > .env
          OPENAI_API_KEY=${{ secrets[format('{0}_OPENAI_API_KEY', matrix.environment)] }}
          PINECONE_API_KEY=${{ secrets[format('{0}_PINECONE_API_KEY', matrix.environment)] }}
          PINECONE_HOST=${{ secrets[format('{0}_PINECONE_HOST', matrix.environment)] }}
          CLAUDE_API_KEY=${{ secrets[format('{0}_CLAUDE_API_KEY', matrix.environment)] }}
          TELEGRAM_API_TOKEN=${{ secrets[format('{0}_TELEGRAM_API_TOKEN', matrix.environment)] }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          TAG=${{ steps.get_version.outputs.VERSION }}
          EOF

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ secrets[format('{0}_SSH_USERNAME', matrix.environment)] }}
          key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', matrix.environment)] }}
          script: |
            mkdir -p ${{ env.APP_PATH }}

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ secrets[format('{0}_SSH_USERNAME', matrix.environment)] }}
          key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', matrix.environment)] }}
          source: "docker/docker-compose.prod.yml,.env"
          target: ${{ env.APP_PATH }}
          strip_components: 1

      - name: Start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ secrets[format('{0}_SSH_USERNAME', matrix.environment)] }}
          key: ${{ secrets[format('{0}_SSH_PRIVATE_KEY', matrix.environment)] }}
          script: |
            cd ${{ env.APP_PATH }}
            docker network create logging_network || true
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

  create-tag:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          default_bump: patch